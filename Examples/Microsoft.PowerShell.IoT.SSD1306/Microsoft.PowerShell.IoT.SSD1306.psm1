# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# Example usage:
# New-OledDisplay | Set-OledText -Value "Hello from PowerShell"

# SSD1306 datasheet can be found here:
# https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf


# Several screen sizes are supported; select the right one
$SSD1306_128_64 = 1
$SSD1306_128_32 = 0
$SSD1306_96_16 = 0

$BLACK = 0
$WHITE = 1
$INVERSE = 2

$SSD1306_SETCONTRAST = 0x81
$SSD1306_DISPLAYALLOW_RESUME = 0xA4
$SSD1306_DISPLAYALLON = 0xA5
$SSD1306_NORMALDISPLAY = 0xA6
$SSD1306_INVERTDISPLAY = 0xA7
$SSD1306_DISPLAYOFF = 0xAE
$SSD1306_DISPLAYON = 0xAF
$SSD1306_SETDISPLAYOFFSET = 0xD3
$SSD1306_SETCOMPINS = 0xDA
$SSD1306_SETVCOMDETECT = 0xDB
$SSD1306_SETDISPLAYCLOCKDIV = 0xD5
$SSD1306_SETPRECHARGE = 0xD9
$SSD1306_SETMULTIPLEX = 0xA8
$SSD1306_SETLOWCOLUMN = 0x00
$SSD1306_SETHIGHCOLUMN = 0x10
$SSD1306_SETSTARTLINE = 0x40
$SSD1306_MEMORYMODE = 0x20
$SSD1306_COLUMNADDR = 0x21
$SSD1306_PAGEADDR   = 0x22
$SSD1306_COMSCANINC = 0xC0
$SSD1306_COMSCANDEC = 0xC8
$SSD1306_SEGREMAP = 0xA0
$SSD1306_CHARGEPUMP = 0x8D
$SSD1306_EXTERNALVCC = 0x1
$SSD1306_SWITCHCAPVCC = 0x2
$SSD1306_ACTIVATE_SCROLL = 0x2F
$SSD1306_DEACTIVATE_SCROLL = 0x2E
$SSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3
$SSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26
$SSD1306_LEFT_HORIZONTAL_SCROLL = 0x27
$SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29
$SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A

if ($SSD1306_128_64)
{
    $SSD1306_LCDWIDTH = 128
    $SSD1306_LCDHEIGHT = 64
    $WIDTH = 128
    $HEIGHT = 64
}
if ($SSD1306_128_32)
{
    $SSD1306_LCDWIDTH = 128
    $SSD1306_LCDHEIGHT = 32
    $WIDTH = 128
    $HEIGHT = 32
}
if ($SSD1306_96_16)
{
    $SSD1306_LCDWIDTH = 96
    $SSD1306_LCDHEIGHT = 16
    $WIDTH = 96
    $HEIGHT = 16
}

[int] $script:cursor_y = 0
[int] $script:cursor_x = 0
[int] $script:textsize = 1
[int] $script:wrap = 1

# memory buffer for the LCD
$buffer = New-Object byte[] ($SSD1306_LCDWIDTH * $SSD1306_LCDHEIGHT / 8)

function New-OledDisplay
{
    param
    (
		[Parameter(Mandatory=$false)]
        [int] $Id = 0x3c,

        [Parameter(Mandatory=$false)]
        [string] $Name = "OLED"
    )

    $Device = Get-I2CDevice -Id $Id -FriendlyName $Name

    $vccstate = $SSD1306_SWITCHCAPVCC;

    # Init process
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_DISPLAYOFF
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETDISPLAYCLOCKDIV
    Set-I2CRegister -Device $Device -Register 0x00 -Data 0x80  # the suggested ratio 0x80
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETMULTIPLEX
    Set-I2CRegister -Device $Device -Register 0x00 -Data ($SSD1306_LCDHEIGHT - 1)
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETDISPLAYOFFSET  # 0xD3
    Set-I2CRegister -Device $Device -Register 0x00 -Data 0x0
    Set-I2CRegister -Device $Device -Register 0x00 -Data ($SSD1306_SETSTARTLINE -bor 0x0)
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_CHARGEPUMP
    if ($vccstate -eq $SSD1306_EXTERNALVCC)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0x10
    } else
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0x14
    }
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_MEMORYMODE
    Set-I2CRegister -Device $Device -Register 0x00 -Data 0x00
    Set-I2CRegister -Device $Device -Register 0x00 -Data ($SSD1306_SEGREMAP -bor 0x1)
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_COMSCANDEC

    if ($SSD1306_128_32)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETCOMPINS
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0x02
        Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETCONTRAST
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0x8F
    }

    if ($SSD1306_128_64)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETCOMPINS
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0x12
        Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETCONTRAST
        if ($vccstate -eq $SSD1306_EXTERNALVCC)
        {
            Set-I2CRegister -Device $Device -Register 0x00 -Data 0x9F
        } else
        {
            Set-I2CRegister -Device $Device -Register 0x00 -Data 0xCF
        }
    }

    if ($SSD1306_96_16)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETCOMPINS
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0x2
        Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETCONTRAST
        if ($vccstate -eq $SSD1306_EXTERNALVCC)
        {
            Set-I2CRegister -Device $Device -Register 0x00 -Data 0x10
        } else
        {
            Set-I2CRegister -Device $Device -Register 0x00 -Data 0xAF
        }
    }

    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETPRECHARGE
    if ($vccstate -eq $SSD1306_EXTERNALVCC)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0x22
    } else
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data 0xF1
    }
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_SETVCOMDETECT
    Set-I2CRegister -Device $Device -Register 0x00 -Data 0x40
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_DISPLAYALLOW_RESUME
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_NORMALDISPLAY
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_DEACTIVATE_SCROLL
    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_DISPLAYON

    $Device
}

function ClearDisplay
{
    [Array]::Clear($buffer, 0, $buffer.Length)
    $script:cursor_y = 0;
    $script:cursor_x = 0;
}

function Display
{
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [Microsoft.PowerShell.IoT.I2CDevice] $Device
    )

    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_COLUMNADDR
    Set-I2CRegister -Device $Device -Register 0x00 -Data 0 # Column start address (0 = reset)
    Set-I2CRegister -Device $Device -Register 0x00 -Data ($SSD1306_LCDWIDTH - 1)  # Column end address

    Set-I2CRegister -Device $Device -Register 0x00 -Data $SSD1306_PAGEADDR
    Set-I2CRegister -Device $Device -Register 0x00 -Data 0 # Page start address (0 = reset)
    if ($SSD1306_LCDHEIGHT -eq 64)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data 7 # Page end address
    }
    if ($SSD1306_LCDHEIGHT -eq 32)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data 3 # Page end address
    }
    if ($SSD1306_LCDHEIGHT -eq 16)
    {
        Set-I2CRegister -Device $Device -Register 0x00 -Data 1 # Page end address
    }

    for ($i = 0; $i -lt ($SSD1306_LCDWIDTH * $SSD1306_LCDHEIGHT / 8); $i++)
    {
        Set-I2CRegister -Device $Device -Register 0x40 -Data $buffer[$i]
    }
}


function DrawPixel
{
    param
    (
        [int] $x,
        [int] $y,
        [int] $color
    )

    if (($x -lt 0) -or ($x -ge $WIDTH) -or ($y -lt 0) -or ($y -ge $HEIGHT))
    {
        return
    }

    # x column
    $i = $x + [math]::truncate($y / 8) * $SSD1306_LCDWIDTH
    if ($color -eq $WHITE)
    {
        $buffer[$i] = $buffer[$i] -bor (1 -shl ($y -band 7))
    }
    if ($color -eq $BLACK)
    {
        $buffer[$i] = $buffer[$i] -band -not(1 -shl ($y -band 7))
    }
    if ($color -eq $INVERSE)
    {
        $buffer[$i] = $buffer[$i]  -bxor (1 -shl ($y -band 7));
    }
}

function DrawChar
{
    param
    (
        [int] $x,
        [int] $y,
        [byte] $c,
        [int] $color,
        [int] $size
    )


    if (($x -ge $WIDTH) -or
        ($y -ge $HEIGHT) -or
        (($x + 6 * $size - 1) -lt 0) -or
        (($y + 8 * $size - 1) -lt 0))
    {
        return
    }

    for ($i = 0; $i -lt 6; $i++)
    {
        [byte] $line = 0
        if ($i -eq 5)
        {
            $line = 0x0
        }
        else
        {
            $line = $font[($c * 5) + $i]
        }

        for ($j = 0; $j -lt 8; $j++)
        {
            if ($line -band 0x1)
            {
                if ($size -eq 1)  # default size
                {
                    DrawPixel ($x + $i) ($y + $j) $color
                }
            }
            $line = $line -shr 1
        }
    }
}

function WriteChar
{
    param
    (
        [byte] $c
    )


    if ($c -eq '\n')
    {
        $script:cursor_y += $script:textsize * 8
        $script:cursor_x = 0
    }
    else
    {
        if ($c -eq '\r')
        {
            // skip
        }
        else
        {
            DrawChar $script:cursor_x $script:cursor_y $c $WHITE $script:textsize
            $script:cursor_x += $script:textsize * 6
            if ($script:wrap -and ($script:cursor_x -gt ($WIDTH - $script:textsize * 6))) 
            {
                $script:cursor_y += $script:textsize * 8
                $script:cursor_x = 0
            }
        }
    }
}

function Set-OledText
{
    param
    (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [Microsoft.PowerShell.IoT.I2CDevice] $Device,

        [string] $Value
    )

    ClearDisplay
    $Value.ToCharArray() | %{ WriteChar $_ }
    Display $Device
}

# Standard ASCII 5x7 font Adaf
[byte[]] $font = @(
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
    0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
    0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
    0x18, 0x3C, 0x7E, 0x3C, 0x18,
    0x1C, 0x57, 0x7D, 0x57, 0x1C,
    0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
    0x00, 0x18, 0x3C, 0x18, 0x00,
    0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
    0x00, 0x18, 0x24, 0x18, 0x00,
    0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
    0x30, 0x48, 0x3A, 0x06, 0x0E,
    0x26, 0x29, 0x79, 0x29, 0x26,
    0x40, 0x7F, 0x05, 0x05, 0x07,
    0x40, 0x7F, 0x05, 0x25, 0x3F,
    0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
    0x7F, 0x3E, 0x1C, 0x1C, 0x08,
    0x08, 0x1C, 0x1C, 0x3E, 0x7F,
    0x14, 0x22, 0x7F, 0x22, 0x14,
    0x5F, 0x5F, 0x00, 0x5F, 0x5F,
    0x06, 0x09, 0x7F, 0x01, 0x7F,
    0x00, 0x66, 0x89, 0x95, 0x6A,
    0x60, 0x60, 0x60, 0x60, 0x60,
    0x94, 0xA2, 0xFF, 0xA2, 0x94,
    0x08, 0x04, 0x7E, 0x04, 0x08,
    0x10, 0x20, 0x7E, 0x20, 0x10,
    0x08, 0x08, 0x2A, 0x1C, 0x08,
    0x08, 0x1C, 0x2A, 0x08, 0x08,
    0x1E, 0x10, 0x10, 0x10, 0x10,
    0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
    0x30, 0x38, 0x3E, 0x38, 0x30,
    0x06, 0x0E, 0x3E, 0x0E, 0x06,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x5F, 0x00, 0x00,
    0x00, 0x07, 0x00, 0x07, 0x00,
    0x14, 0x7F, 0x14, 0x7F, 0x14,
    0x24, 0x2A, 0x7F, 0x2A, 0x12,
    0x23, 0x13, 0x08, 0x64, 0x62,
    0x36, 0x49, 0x56, 0x20, 0x50,
    0x00, 0x08, 0x07, 0x03, 0x00,
    0x00, 0x1C, 0x22, 0x41, 0x00,
    0x00, 0x41, 0x22, 0x1C, 0x00,
    0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
    0x08, 0x08, 0x3E, 0x08, 0x08,
    0x00, 0x80, 0x70, 0x30, 0x00,
    0x08, 0x08, 0x08, 0x08, 0x08,
    0x00, 0x00, 0x60, 0x60, 0x00,
    0x20, 0x10, 0x08, 0x04, 0x02,
    0x3E, 0x51, 0x49, 0x45, 0x3E,
    0x00, 0x42, 0x7F, 0x40, 0x00,
    0x72, 0x49, 0x49, 0x49, 0x46,
    0x21, 0x41, 0x49, 0x4D, 0x33,
    0x18, 0x14, 0x12, 0x7F, 0x10,
    0x27, 0x45, 0x45, 0x45, 0x39,
    0x3C, 0x4A, 0x49, 0x49, 0x31,
    0x41, 0x21, 0x11, 0x09, 0x07,
    0x36, 0x49, 0x49, 0x49, 0x36,
    0x46, 0x49, 0x49, 0x29, 0x1E,
    0x00, 0x00, 0x14, 0x00, 0x00,
    0x00, 0x40, 0x34, 0x00, 0x00,
    0x00, 0x08, 0x14, 0x22, 0x41,
    0x14, 0x14, 0x14, 0x14, 0x14,
    0x00, 0x41, 0x22, 0x14, 0x08,
    0x02, 0x01, 0x59, 0x09, 0x06,
    0x3E, 0x41, 0x5D, 0x59, 0x4E,
    0x7C, 0x12, 0x11, 0x12, 0x7C,
    0x7F, 0x49, 0x49, 0x49, 0x36,
    0x3E, 0x41, 0x41, 0x41, 0x22,
    0x7F, 0x41, 0x41, 0x41, 0x3E,
    0x7F, 0x49, 0x49, 0x49, 0x41,
    0x7F, 0x09, 0x09, 0x09, 0x01,
    0x3E, 0x41, 0x41, 0x51, 0x73,
    0x7F, 0x08, 0x08, 0x08, 0x7F,
    0x00, 0x41, 0x7F, 0x41, 0x00,
    0x20, 0x40, 0x41, 0x3F, 0x01,
    0x7F, 0x08, 0x14, 0x22, 0x41,
    0x7F, 0x40, 0x40, 0x40, 0x40,
    0x7F, 0x02, 0x1C, 0x02, 0x7F,
    0x7F, 0x04, 0x08, 0x10, 0x7F,
    0x3E, 0x41, 0x41, 0x41, 0x3E,
    0x7F, 0x09, 0x09, 0x09, 0x06,
    0x3E, 0x41, 0x51, 0x21, 0x5E,
    0x7F, 0x09, 0x19, 0x29, 0x46,
    0x26, 0x49, 0x49, 0x49, 0x32,
    0x03, 0x01, 0x7F, 0x01, 0x03,
    0x3F, 0x40, 0x40, 0x40, 0x3F,
    0x1F, 0x20, 0x40, 0x20, 0x1F,
    0x3F, 0x40, 0x38, 0x40, 0x3F,
    0x63, 0x14, 0x08, 0x14, 0x63,
    0x03, 0x04, 0x78, 0x04, 0x03,
    0x61, 0x59, 0x49, 0x4D, 0x43,
    0x00, 0x7F, 0x41, 0x41, 0x41,
    0x02, 0x04, 0x08, 0x10, 0x20,
    0x00, 0x41, 0x41, 0x41, 0x7F,
    0x04, 0x02, 0x01, 0x02, 0x04,
    0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x03, 0x07, 0x08, 0x00,
    0x20, 0x54, 0x54, 0x78, 0x40,
    0x7F, 0x28, 0x44, 0x44, 0x38,
    0x38, 0x44, 0x44, 0x44, 0x28,
    0x38, 0x44, 0x44, 0x28, 0x7F,
    0x38, 0x54, 0x54, 0x54, 0x18,
    0x00, 0x08, 0x7E, 0x09, 0x02,
    0x18, 0xA4, 0xA4, 0x9C, 0x78,
    0x7F, 0x08, 0x04, 0x04, 0x78,
    0x00, 0x44, 0x7D, 0x40, 0x00,
    0x20, 0x40, 0x40, 0x3D, 0x00,
    0x7F, 0x10, 0x28, 0x44, 0x00,
    0x00, 0x41, 0x7F, 0x40, 0x00,
    0x7C, 0x04, 0x78, 0x04, 0x78,
    0x7C, 0x08, 0x04, 0x04, 0x78,
    0x38, 0x44, 0x44, 0x44, 0x38,
    0xFC, 0x18, 0x24, 0x24, 0x18,
    0x18, 0x24, 0x24, 0x18, 0xFC,
    0x7C, 0x08, 0x04, 0x04, 0x08,
    0x48, 0x54, 0x54, 0x54, 0x24,
    0x04, 0x04, 0x3F, 0x44, 0x24,
    0x3C, 0x40, 0x40, 0x20, 0x7C,
    0x1C, 0x20, 0x40, 0x20, 0x1C,
    0x3C, 0x40, 0x30, 0x40, 0x3C,
    0x44, 0x28, 0x10, 0x28, 0x44,
    0x4C, 0x90, 0x90, 0x90, 0x7C,
    0x44, 0x64, 0x54, 0x4C, 0x44,
    0x00, 0x08, 0x36, 0x41, 0x00,
    0x00, 0x00, 0x77, 0x00, 0x00,
    0x00, 0x41, 0x36, 0x08, 0x00,
    0x02, 0x01, 0x02, 0x04, 0x02,
    0x3C, 0x26, 0x23, 0x26, 0x3C,
    0x1E, 0xA1, 0xA1, 0x61, 0x12,
    0x3A, 0x40, 0x40, 0x20, 0x7A,
    0x38, 0x54, 0x54, 0x55, 0x59,
    0x21, 0x55, 0x55, 0x79, 0x41,
    0x21, 0x54, 0x54, 0x78, 0x41,
    0x21, 0x55, 0x54, 0x78, 0x40,
    0x20, 0x54, 0x55, 0x79, 0x40,
    0x0C, 0x1E, 0x52, 0x72, 0x12,
    0x39, 0x55, 0x55, 0x55, 0x59,
    0x39, 0x54, 0x54, 0x54, 0x59,
    0x39, 0x55, 0x54, 0x54, 0x58,
    0x00, 0x00, 0x45, 0x7C, 0x41,
    0x00, 0x02, 0x45, 0x7D, 0x42,
    0x00, 0x01, 0x45, 0x7C, 0x40,
    0xF0, 0x29, 0x24, 0x29, 0xF0,
    0xF0, 0x28, 0x25, 0x28, 0xF0,
    0x7C, 0x54, 0x55, 0x45, 0x00,
    0x20, 0x54, 0x54, 0x7C, 0x54,
    0x7C, 0x0A, 0x09, 0x7F, 0x49,
    0x32, 0x49, 0x49, 0x49, 0x32,
    0x32, 0x48, 0x48, 0x48, 0x32,
    0x32, 0x4A, 0x48, 0x48, 0x30,
    0x3A, 0x41, 0x41, 0x21, 0x7A,
    0x3A, 0x42, 0x40, 0x20, 0x78,
    0x00, 0x9D, 0xA0, 0xA0, 0x7D,
    0x39, 0x44, 0x44, 0x44, 0x39,
    0x3D, 0x40, 0x40, 0x40, 0x3D,
    0x3C, 0x24, 0xFF, 0x24, 0x24,
    0x48, 0x7E, 0x49, 0x43, 0x66,
    0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
    0xFF, 0x09, 0x29, 0xF6, 0x20,
    0xC0, 0x88, 0x7E, 0x09, 0x03,
    0x20, 0x54, 0x54, 0x79, 0x41,
    0x00, 0x00, 0x44, 0x7D, 0x41,
    0x30, 0x48, 0x48, 0x4A, 0x32,
    0x38, 0x40, 0x40, 0x22, 0x7A,
    0x00, 0x7A, 0x0A, 0x0A, 0x72,
    0x7D, 0x0D, 0x19, 0x31, 0x7D,
    0x26, 0x29, 0x29, 0x2F, 0x28,
    0x26, 0x29, 0x29, 0x29, 0x26,
    0x30, 0x48, 0x4D, 0x40, 0x20,
    0x38, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x38,
    0x2F, 0x10, 0xC8, 0xAC, 0xBA,
    0x2F, 0x10, 0x28, 0x34, 0xFA,
    0x00, 0x00, 0x7B, 0x00, 0x00,
    0x08, 0x14, 0x2A, 0x14, 0x22,
    0x22, 0x14, 0x2A, 0x14, 0x08,
    0xAA, 0x00, 0x55, 0x00, 0xAA,
    0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0x00, 0x00, 0x00, 0xFF, 0x00,
    0x10, 0x10, 0x10, 0xFF, 0x00,
    0x14, 0x14, 0x14, 0xFF, 0x00,
    0x10, 0x10, 0xFF, 0x00, 0xFF,
    0x10, 0x10, 0xF0, 0x10, 0xF0,
    0x14, 0x14, 0x14, 0xFC, 0x00,
    0x14, 0x14, 0xF7, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0xFF,
    0x14, 0x14, 0xF4, 0x04, 0xFC,
    0x14, 0x14, 0x17, 0x10, 0x1F,
    0x10, 0x10, 0x1F, 0x10, 0x1F,
    0x14, 0x14, 0x14, 0x1F, 0x00,
    0x10, 0x10, 0x10, 0xF0, 0x00,
    0x00, 0x00, 0x00, 0x1F, 0x10,
    0x10, 0x10, 0x10, 0x1F, 0x10,
    0x10, 0x10, 0x10, 0xF0, 0x10,
    0x00, 0x00, 0x00, 0xFF, 0x10,
    0x10, 0x10, 0x10, 0x10, 0x10,
    0x10, 0x10, 0x10, 0xFF, 0x10,
    0x00, 0x00, 0x00, 0xFF, 0x14,
    0x00, 0x00, 0xFF, 0x00, 0xFF,
    0x00, 0x00, 0x1F, 0x10, 0x17,
    0x00, 0x00, 0xFC, 0x04, 0xF4,
    0x14, 0x14, 0x17, 0x10, 0x17,
    0x14, 0x14, 0xF4, 0x04, 0xF4,
    0x00, 0x00, 0xFF, 0x00, 0xF7,
    0x14, 0x14, 0x14, 0x14, 0x14,
    0x14, 0x14, 0xF7, 0x00, 0xF7,
    0x14, 0x14, 0x14, 0x17, 0x14,
    0x10, 0x10, 0x1F, 0x10, 0x1F,
    0x14, 0x14, 0x14, 0xF4, 0x14,
    0x10, 0x10, 0xF0, 0x10, 0xF0,
    0x00, 0x00, 0x1F, 0x10, 0x1F,
    0x00, 0x00, 0x00, 0x1F, 0x14,
    0x00, 0x00, 0x00, 0xFC, 0x14,
    0x00, 0x00, 0xF0, 0x10, 0xF0,
    0x10, 0x10, 0xFF, 0x10, 0xFF,
    0x14, 0x14, 0x14, 0xFF, 0x14,
    0x10, 0x10, 0x10, 0x1F, 0x00,
    0x00, 0x00, 0x00, 0xF0, 0x10,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0xFF, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0xFF,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x38, 0x44, 0x44, 0x38, 0x44,
    0x7C, 0x2A, 0x2A, 0x3E, 0x14,
    0x7E, 0x02, 0x02, 0x06, 0x06,
    0x02, 0x7E, 0x02, 0x7E, 0x02,
    0x63, 0x55, 0x49, 0x41, 0x63,
    0x38, 0x44, 0x44, 0x3C, 0x04,
    0x40, 0x7E, 0x20, 0x1E, 0x20,
    0x06, 0x02, 0x7E, 0x02, 0x02,
    0x99, 0xA5, 0xE7, 0xA5, 0x99,
    0x1C, 0x2A, 0x49, 0x2A, 0x1C,
    0x4C, 0x72, 0x01, 0x72, 0x4C,
    0x30, 0x4A, 0x4D, 0x4D, 0x30,
    0x30, 0x48, 0x78, 0x48, 0x30,
    0xBC, 0x62, 0x5A, 0x46, 0x3D,
    0x3E, 0x49, 0x49, 0x49, 0x00,
    0x7E, 0x01, 0x01, 0x01, 0x7E,
    0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
    0x44, 0x44, 0x5F, 0x44, 0x44,
    0x40, 0x51, 0x4A, 0x44, 0x40,
    0x40, 0x44, 0x4A, 0x51, 0x40,
    0x00, 0x00, 0xFF, 0x01, 0x03,
    0xE0, 0x80, 0xFF, 0x00, 0x00,
    0x08, 0x08, 0x6B, 0x6B, 0x08,
    0x36, 0x12, 0x36, 0x24, 0x36,
    0x06, 0x0F, 0x09, 0x0F, 0x06,
    0x00, 0x00, 0x18, 0x18, 0x00,
    0x00, 0x00, 0x10, 0x10, 0x00,
    0x30, 0x40, 0xFF, 0x01, 0x01,
    0x00, 0x1F, 0x01, 0x01, 0x1E,
    0x00, 0x19, 0x1D, 0x17, 0x12,
    0x00, 0x3C, 0x3C, 0x3C, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x00)
